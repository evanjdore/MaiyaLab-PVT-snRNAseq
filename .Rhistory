View(og.neurons)
set.seed(420)
pct <- og.neurons[["pca"]]@stdev / sum(og.neurons[["pca"]]@stdev) * 100
cumu <- cumsum(pct)
co1 <- which(cumu > 90 & pct < 5)[1]
co2 <- sort(which((pct[1:length(pct) - 1] - pct[2:length(pct)]) > 0.1), decreasing = T)[1] + 1
min.pcs <- min(co1, co2)
og.neurons <- RunUMAP(og.neurons,
reduction = "harmony",
dims = 1:min.pcs,
n.epochs = 500,
min.dist = 0.3,
return.model = TRUE)
DimPlot(og.neurons)
sc.map <- sc.maiya
set.seed(420)
anchors<- FindTransferAnchors(reference = og.neurons,
query = sc.map,
reference.reduction = "pca",
normalization.method = "SCT")
sc.map <- MapQuery(anchorset = anchors,
reference = og.neurons,
query = sc.map,
refdata = list(celltype = "idents"),
reference.reduction = "pca",
reduction.model = "umap")
DimPlot_scCustom(sc.map,
reduction = "umap",
group.by = "predicted.celltype",
aspect_ratio = 1,
label = TRUE,
label.box = TRUE,
repel = TRUE) +
NoLegend() + labs(title = NULL, subtitle = NULL)
View(sc.map)
umap <- DimPlot_scCustom(sc.map,
reduction = "umap",
group.by = "SCT_snn_res.0.2",
aspect_ratio = 1,
label = TRUE,
label.box = TRUE,
repel = TRUE) +
NoLegend() + labs(title = NULL, subtitle = NULL)
pred.umap <- DimPlot_scCustom(sc.map,
reduction = "umap",
group.by = "predicted.celltype",
aspect_ratio = 1,
label = TRUE,
label.box = TRUE,
repel = TRUE) +
NoLegend() + labs(title = NULL, subtitle = NULL)
pred.umap + umap
df <- og.neurons@meta.data
df <- sc.map@meta.data
View(df)
table(sc.map@meta.data$predicted.celltype)
umap
pred.umap
umap
pred.umap
clustree(sc.map,
prefix = "SCT_")
clustree(sc.map,
prefix = "SCT_scc_res.")
clustree(sc.maiya,
prefix = "SCT_scc_res.")
clustree(sc.maiya,
prefix = "SCT_snn_res.")
Idents(sc.map) <- "predicted.celltype"
predmarkers <- FindAllMarkers(sc.map)
predmarkers$pct_ratio = predmarkers$pct.1 / predmarkers$pct.2
predmarkers <- predmarkers[!grepl("^Gm", rownames(predmarkers)), ]
predmarkers <- predmarkers[!grepl("Rik$", rownames(predmarkers)), ]
predmarkers <- predmarkers[!grepl("^mt-", rownames(predmarkers)), ]
predmarkers %>%
top_n(n = 25, pct_ratio) ->predmarkerstop25
View(predmarkerstop25)
umap
Idents(sc.map) <- "SCT_snn_res.0.2"
markers02 <- FindAllMarkers(sc.map)
markers$pct_ratio = markers$pct.1 / markers$pct.2
markers02$pct_ratio = markers02$pct.1 / markers02$pct.2
markers02 <- markers02[!grepl("^Gm", markers02$gene), ]
markers02 <- markers02[!grepl("Rik$", markers02$gene), ]
markers02 <- markers02[!grepl("^mt-", markers02$gene), ]
markers02 %>%
top_n(n = 25, pct_ratio) ->markerstop25
View(markerstop25)
View(markers02)
clus4 <- FindMarkers(sc.map,
ident.1 = "4",
min.pct = 0.25)
View(clus4)
clus4$pct_ratio = clus4$pct.1 / clus4$pct.2
pred.umap + umap
View(sc.map)
pvt <- subset(sc.map, idents = "0")
DimPlot(pvt)
saveRDS(pvt, "C:/Users/Evan/Dropbox/single_cell/reanalysis/gao/data/pvt.rds")
knitr::opts_chunk$set(echo = TRUE)
pvt <- readRDS("C:/Users/Evan/Dropbox/single_cell/reanalysis/gao/data/pvt.rds")
View(pvt)
pvt.counts <- pvt[["RNA"]]$counts
cols.keep <- c("orig.id")
df <- pvt@meta.data %>%
select(cols.keep)
pvt <- CreateSeuratObject(pvt.counts)
pvt@meta.data <- df
View(pvt)
set.seed(420)
pvt <- pvt %>%
SCTransform(vst.flavor = "v2") %>%
RunPCA(npcs = 30)
View(pvt)
pvt <- SCTransform(pvt, vst.flavor = "v2")
View(pvt.counts)
pvt <- CreateSeuratObject(pvt.counts)
View(pvt)
View(sc.maiya)
View(sc.gao)
pvt <- readRDS("C:/Users/Evan/Dropbox/single_cell/reanalysis/gao/data/pvt.rds")
pvt.counts <- pvt[["RNA"]]$counts
cols.keep <- c("orig.id")
pvtmeta <- pvt@meta.data %>%
select(colos.keep)
pvtmeta <- pvt@meta.data %>%
select(cols.keep)
pvt <- CreateSeuratObject(counts = pvt.counts, meta.data = pvtmeta)
set.seed(420)
pvt <- SCTransform(pvt, vst.flavor = "v2")
pvt <- pvt %>%
SCTransform(vst.flavor = "v2") %>%
RunPCA(npcs = 30)
pct <- sc.maiya[["pca"]]@stdev / sum(sc.maiya[["pca"]]@stdev) * 100
cumu <- cumsum(pct)
co1 <- which(cumu > 90 & pct < 5)[1]
co2 <- sort(which((pct[1:length(pct) - 1] - pct[2:length(pct)]) > 0.1), decreasing = T)[1] + 1
min.pcs <- min(co1, co2)
set.seed(420)
pvt <- RunHarmony(pvt, "orig.id")
pvt <- pvt %>%
FindNeighbors(dims = 1:min.pcs,
reduction = "harmony") %>%
FindClusters(resolution = 0.4)
set.seed(420)
pvt <- RunUMAP(pvt,
reduction = "harmony",
dims = 1:min.pcs,
return.model = TRUE)
umap <- DimPlot_scCustom(pvt,
reduction = "umap",
group.by = "SCT_snn_res.0.4",
aspect_ratio = 1,
label = TRUE,
label.box = TRUE,
repel = TRUE) +
NoLegend() + labs(title = NULL, subtitle = NULL)
umap
pvt <- pvt %>%
FindNeighbors(dims = 1:min.pcs,
reduction = "harmony") %>%
FindClusters(resolution = c(0.1, 0.2, 0.3, 0.4))
set.seed(420)
pvt <- RunUMAP(pvt,
reduction = "harmony",
dims = 1:min.pcs,
return.model = TRUE)
set.seed(420)
pvt <- RunUMAP(pvt,
reduction = "harmony",
dims = 1:min.pcs,
return.model = TRUE)
clustree(pvt)
shiny::runApp('C:/Users/Evan/Dropbox/single_cell/pvt-shiny/MaiyaLab-PVT-snRNAseq')
runApp('C:/Users/Evan/Dropbox/single_cell/pvt-shiny/MaiyaLab-PVT-snRNAseq')
runApp('C:/Users/Evan/Dropbox/single_cell/pvt-shiny/MaiyaLab-PVT-snRNAseq')
install.packages(c("callr", "circlize", "commonmark", "cowplot", "curl", "data.table", "DBI", "dbplyr", "deldir", "digest", "DT", "ggforce", "ggplot2", "ggraph", "ggridges", "globals", "gplots", "graphlayouts", "httpuv", "igraph", "listenv", "parallelly", "pkgbuild", "processx", "R.oo", "ragg", "RcppAnnoy", "RcppArmadillo", "RcppEigen", "RcppHNSW", "remotes", "reticulate", "rmarkdown", "rvest", "sass", "scCustomize", "Seurat", "shape", "sp", "spatstat.explore", "spatstat.geom", "spatstat.random", "systemfonts", "tidygraph", "tidyr", "tidyselect", "tinytex", "tweenr", "usethis", "viridis", "xfun", "zip"))
install.packages(c("callr", "circlize", "commonmark", "cowplot", "curl", "data.table", "DBI", "dbplyr", "deldir", "digest", "DT", "ggforce", "ggplot2", "ggraph", "ggridges", "globals", "gplots", "graphlayouts", "httpuv", "igraph", "listenv", "parallelly", "pkgbuild", "processx", "R.oo", "ragg", "RcppAnnoy", "RcppArmadillo", "RcppEigen", "RcppHNSW", "remotes", "reticulate", "rmarkdown", "rvest", "sass", "scCustomize", "Seurat", "shape", "sp", "spatstat.explore", "spatstat.geom", "spatstat.random", "systemfonts", "tidygraph", "tidyr", "tidyselect", "tinytex", "tweenr", "usethis", "viridis", "xfun", "zip"))
install.packages(c("data.table", "dbplyr", "deldir", "digest", "httpuv", "igraph", "RcppAnnoy", "RcppHNSW", "remotes", "reticulate", "rvest", "sass", "scCustomize", "Seurat", "shape", "sp", "spatstat.explore", "spatstat.geom", "spatstat.random", "systemfonts", "tidygraph", "tidyr", "tweenr", "usethis", "viridis", "xfun", "zip"))
library(shiny)
library(shinydashboard)
library(Seurat)
library(scCustomize)
library(htmlwidgets)
library(ggplot2)
library(DT)
library(dplyr)
setwd("C:/Users/Evan/Dropbox/single_cell/pvt-shiny/MaiyaLab-PVT-snRNAseq")
sc <- readRDS("data/maiya_pvt_snrnaseq_diet.rds")
View(sc)
knitr::opts_chunk$set(echo = TRUE)
counts <- sc@assays[["SCT"]]@counts
data <- sc@assays[["SCT"]]@data
sc@assays[["RNA"]]@counts <- data
View(sc)
sc@assays[["RNA"]]@counts <- sc@assays[["SCT"]]@data
sc@assays[["RNA"]]@data <- sc@assays[["SCT"]]@counts
counts <- sc@assays[["SCT"]]$counts
data <- sc@assays[["SCT"]]$data
sc@assays[["RNA"]]$counts <- sc@assays[["SCT"]]$data
sc@assays[["RNA"]]$data <- sc@assays[["SCT"]]$counts
sc <- SetAssayData(
sc[["RNA"]],
layer = "data"),
sc <- SetAssayData(sc[["RNA"]], layer = "data", new.data = counts)
sc[["RNA"]] <- CreateAssayObject(counts = data)
sc@assays[["RNA"]]$data <- counts
sc <- DietSeurat(sc,
assays = "RNA",
layers = c("counts", "data"),
dimreducs = "umap")
DefaultAssay(sc) <- "RNA"
sc2 <- DietSeurat(sc,
assays = "RNA",
layers = c("counts", "data"),
dimreducs = "umap")
View(sc2)
runApp()
sc2@commands <- NULL
saveRDS(sc2, "data/maiya_pvt_snrnaseq_diet.rds")
runApp()
View(sc)
View(sc2)
knitr::knit_hooks$set(set_seed = function(before, options) {
if (before) { # If it's before the chunk
set.seed(420) # Set the seed
}
return(NULL)
})
knitr::opts_hooks$set(set_seed = knitr::knit_hooks$get('set_seed'))
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, set_seed = TRUE)
library(htmlwidgets)
library(DT)
create_dt <- function(x){
DT::datatable(x,
extensions = c('Buttons', 'FixedColumns'),
options = list(dom = 'Blfrtip',
buttons = c('copy'),
lengthMenu = list(c(50,-1), c(50,"All")),
initComplete = DT::JS(
"function(settings, json) {",
"  $('body').css({'font-family': 'Arial'});",
"}"
),
scrollX = TRUE,
fixedColumns = TRUE)
)
}
library(Seurat)
library(ggplot2)
library(SeuratWrappers)
library(dplyr)
library(sctransform)
library(harmony)
library(scCustomize)
library(clustree)
library(future)
library(presto)
sc <- readRDS("C:/Users/Evan/Dropbox/aggr/analysis/run2/data/phase3_sorted.rds")
levels(sc) <- c("PVT1", "PVT2", "PVT3", "PVT4", "PVT5")
sc[["subtypes"]] <- Idents(sc)
sc <- sc2
sc <- readRDS("C:/Users/Evan/Dropbox/aggr/analysis/run2/data/phase3_sorted.rds")
levels(sc) <- c("PVT1", "PVT2", "PVT3", "PVT4", "PVT5")
sc[["subtypes"]] <- Idents(sc)
sc2<- sc
setwd("C:/Users/Evan/Dropbox/single_cell/pvt-shiny/MaiyaLab-PVT-snRNAseq")
sc <- readRDS("data/maiya_pvt_snrnaseq_diet.rds")
View(sc2)
View(sc)
cells8 <- FetchData(sc2, vars = "Oprk1", layer = "data")
cells8 <- filter(cells8, .data[["Oprk1"]] >= 1)
cells8 <- rownames(cells8)
set.seed(420)
df <- FindMarkers(sc2,
ident.1 = cells8,
slot = "data",
only.pos = TRUE,
logfc.threshold = 0.25,
min.diff.pct = 0.125)
df <- df[!grepl("^Gm", rownames(df)), ]
df <- df[!grepl("Rik$", rownames(df)), ]
df <- df[!grepl("^mt-", rownames(df)), ]
df$pct_ratio = df$pct.1 / df$pct.2
df <- filter(df, !(rownames(df) %in% input$geneName4))
df <- filter(df, !(rownames(df) %in% "Oprk1"))
df <- df %>%
filter(p_val_adj <= 0.05) %>%
arrange(desc(avg_log2FC)) %>%
select(-p_val) %>%
relocate(pct_ratio, .after = pct.2)
df$avg_log2FC <- format(round(df$avg_log2FC, 3), nsmall = 3)
df$pct_ratio <- format(round(df$pct_ratio, 3), nsmall = 3)
colnames(df) <- c("Log2FC", "% Expressed in Targeted Cells", "% Expressed in All Other Cells", "% Ratio", "Adjusted p-value")
df
DefaultAssay(sc2) <- "RNA"
cells8 <- FetchData(sc2, vars = "Oprk1", layer = "data")
cells8 <- filter(cells8, .data[["Oprk1"]] >= 1)
cells8 <- rownames(cells8)
set.seed(420)
df <- FindMarkers(sc2,
ident.1 = cells8,
slot = "data",
only.pos = TRUE,
logfc.threshold = 0.25,
min.diff.pct = 0.125)
df <- df[!grepl("^Gm", rownames(df)), ]
df <- df[!grepl("Rik$", rownames(df)), ]
df <- df[!grepl("^mt-", rownames(df)), ]
df$pct_ratio = df$pct.1 / df$pct.2
df <- filter(df, !(rownames(df) %in% "Oprk1"))
df <- df %>%
filter(p_val_adj <= 0.05) %>%
arrange(desc(avg_log2FC)) %>%
select(-p_val) %>%
relocate(pct_ratio, .after = pct.2)
df$avg_log2FC <- format(round(df$avg_log2FC, 3), nsmall = 3)
df$pct_ratio <- format(round(df$pct_ratio, 3), nsmall = 3)
colnames(df) <- c("Log2FC", "% Expressed in Targeted Cells", "% Expressed in All Other Cells", "% Ratio", "Adjusted p-value")
df
VlnPlot_scCustom(sc,
features = "Oprk1",
group.by = "novel_subtypes",
log = FALSE,
add.noise = TRUE,
layer = "data",
pt.size = 0,
colors_use = color_set) +
NoLegend()
VlnPlot_scCustom(sc,
features = "Oprk1",
group.by = "novel_subtypes",
log = FALSE,
add.noise = TRUE,
layer = "data",
pt.size = 0) +
NoLegend()
VlnPlot_scCustom(sc,
features = "Oprk1",
group.by = "novel_subtypes",
log = FALSE,
add.noise = TRUE,
layer = "counts",
pt.size = 0) +
NoLegend()
VlnPlot_scCustom(sc2,
features = "Oprk1",
group.by = "novel_subtypes",
log = FALSE,
add.noise = TRUE,
layer = "data",
pt.size = 0) +
NoLegend()
VlnPlot_scCustom(sc2,
features = "Oprk1",
log = FALSE,
add.noise = TRUE,
layer = "data",
pt.size = 0) +
NoLegend()
VlnPlot_scCustom(sc2,
features = "Oprk1",
log = FALSE,
add.noise = TRUE,
layer = "counts",
pt.size = 0) +
NoLegend()
VlnPlot_scCustom(sc2,
features = "Oprk1",
log = FALSE,
add.noise = TRUE,
layer = "data",
pt.size = 0) +
NoLegend()
DefaultAssay(sc2) <- "SCT"
VlnPlot_scCustom(sc2,
features = "Oprk1",
log = FALSE,
add.noise = TRUE,
layer = "data",
pt.size = 0) +
NoLegend()
VlnPlot_scCustom(sc,
features = "Oprk1",
group.by = "novel_subtypes",
log = FALSE,
add.noise = TRUE,
layer = "counts",
pt.size = 0) +
NoLegend()
VlnPlot_scCustom(sc,
features = "Oprk1",
group.by = "known_subtypes",
log = FALSE,
add.noise = TRUE,
layer = "counts",
pt.size = 0) +
NoLegend()
View(df)
cells8 <- FetchData(sc, vars = "Oprk1", layer = "counts")
cells8 <- filter(cells8, .data[["Oprk1"]] >= 1)
cells8 <- rownames(cells8)
df <- FindMarkers(sc,
ident.1 = cells8,
slot = "data",
only.pos = TRUE,
logfc.threshold = 0.25,
min.diff.pct = 0.125)
df <- df[!grepl("^Gm", rownames(df)), ]
df <- df[!grepl("Rik$", rownames(df)), ]
df <- df[!grepl("^mt-", rownames(df)), ]
df$pct_ratio = df$pct.1 / df$pct.2
df <- filter(df, !(rownames(df) %in% "Oprk1"))
df <- df %>%
filter(p_val_adj <= 0.05) %>%
arrange(desc(avg_log2FC)) %>%
select(-p_val) %>%
relocate(pct_ratio, .after = pct.2)
df$avg_log2FC <- format(round(df$avg_log2FC, 3), nsmall = 3)
df$pct_ratio <- format(round(df$pct_ratio, 3), nsmall = 3)
colnames(df) <- c("Log2FC", "% Expressed in Targeted Cells", "% Expressed in All Other Cells", "% Ratio", "Adjusted p-value")
df
DefaultAssay(sc) <- "RNA"
cells8 <- FetchData(sc, vars = "Oprk1", layer = "counts")
cells8 <- filter(cells8, .data[["Oprk1"]] >= 1)
cells8 <- rownames(cells8)
set.seed(420)
df <- FindMarkers(sc,
ident.1 = cells8,
slot = "counts",
only.pos = TRUE,
logfc.threshold = 0.25,
min.diff.pct = 0.125)
df <- df[!grepl("^Gm", rownames(df)), ]
df <- df[!grepl("Rik$", rownames(df)), ]
df <- df[!grepl("^mt-", rownames(df)), ]
df$pct_ratio = df$pct.1 / df$pct.2
df <- filter(df, !(rownames(df) %in% "Oprk1"))
df <- df %>%
filter(p_val_adj <= 0.05) %>%
arrange(desc(avg_log2FC)) %>%
select(-p_val) %>%
relocate(pct_ratio, .after = pct.2)
df$avg_log2FC <- format(round(df$avg_log2FC, 3), nsmall = 3)
df$pct_ratio <- format(round(df$pct_ratio, 3), nsmall = 3)
colnames(df) <- c("Log2FC", "% Expressed in Targeted Cells", "% Expressed in All Other Cells", "% Ratio", "Adjusted p-value")
df
View(df)
DefaultAssay(sc) <- "RNA"
cells8 <- FetchData(sc, vars = "Oprk1", layer = "data")
cells8 <- filter(cells8, .data[["Oprk1"]] >= 1)
cells8 <- rownames(cells8)
set.seed(420)
df <- FindMarkers(sc,
ident.1 = cells8,
slot = "data",
only.pos = TRUE,
logfc.threshold = 0.25,
min.diff.pct = 0.125)
df <- df[!grepl("^Gm", rownames(df)), ]
df <- df[!grepl("Rik$", rownames(df)), ]
df <- df[!grepl("^mt-", rownames(df)), ]
df$pct_ratio = df$pct.1 / df$pct.2
df <- filter(df, !(rownames(df) %in% "Oprk1"))
df <- df %>%
filter(p_val_adj <= 0.05) %>%
arrange(desc(avg_log2FC)) %>%
select(-p_val) %>%
relocate(pct_ratio, .after = pct.2)
df$avg_log2FC <- format(round(df$avg_log2FC, 3), nsmall = 3)
df$pct_ratio <- format(round(df$pct_ratio, 3), nsmall = 3)
colnames(df) <- c("Log2FC", "% Expressed in Targeted Cells", "% Expressed in All Other Cells", "% Ratio", "Adjusted p-value")
df
DefaultAssay(sc2) <- "RNA"
cells8 <- FetchData(sc2, vars = "Oprk1", layer = "data")
cells8 <- filter(cells8, .data[["Oprk1"]] >= 1)
cells8 <- rownames(cells8)
set.seed(420)
df2 <- FindMarkers(sc2,
ident.1 = cells8,
slot = "data",
only.pos = TRUE,
logfc.threshold = 0.25,
min.diff.pct = 0.125)
df2 <- df2[!grepl("^Gm", rownames(df2)), ]
df2 <- df2[!grepl("Rik$", rownames(df2)), ]
df2 <- df2[!grepl("^mt-", rownames(df2)), ]
df2$pct_ratio = df2$pct.1 / df2$pct.2
df2 <- filter(df2, !(rownames(df2) %in% "Oprk1"))
df2 <- df2 %>%
filter(p_val_adj <= 0.05) %>%
arrange(desc(avg_log2FC)) %>%
select(-p_val) %>%
relocate(pct_ratio, .after = pct.2)
df2$avg_log2FC <- format(round(df2$avg_log2FC, 3), nsmall = 3)
df2$pct_ratio <- format(round(df2$pct_ratio, 3), nsmall = 3)
colnames(df2) <- c("Log2FC", "% Expressed in Targeted Cells", "% Expressed in All Other Cells", "% Ratio", "Adjusted p-value")
df2
View(df2)
View(df)
runApp()
View(df)
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
remaining_cells <- setdiff(colnames(sc), cells8)
df <- filter(df, p_val_adj <= 0.05)
df <- arrange(df, desc(avg_log2FC))
df <- select(df, -p_val) %>%
df <- relocate(df, pct_ratio, .after = pct.2)
View(df)
runApp()
